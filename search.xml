<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>koa入门</title>
    <url>/2020/03/01/koa%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">生成package.json文件</span></span><br><span class="line">npm init -y</span><br><span class="line"><span class="meta">#</span><span class="bash">安装koa</span></span><br><span class="line">npm install --save koa</span><br></pre></td></tr></table></figure>

<h2 id="创建服务"><a href="#创建服务" class="headerlink" title="创建服务"></a>创建服务</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; ctx koa自带的上下文参数</span><br><span class="line">const koa &#x3D; require(&#39;koa&#39;)</span><br><span class="line">const app &#x3D; new koa()</span><br><span class="line"> </span><br><span class="line">app.use( async ( ctx ) &#x3D;&gt; &#123;</span><br><span class="line">  ctx.body &#x3D; &#39;hello koa2&#39;</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">app.listen(3000)</span><br><span class="line">console.log(&#39;[demo] start-quick is starting at port 3000&#39;)</span><br></pre></td></tr></table></figure>

<h2 id="获取get和post参数"><a href="#获取get和post参数" class="headerlink" title="获取get和post参数"></a>获取get和post参数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; get 可以直接在ctx获取query和querystring</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; post请求的处理，Koa2没有封装方便的获取参数的方法，需要通过解析上下文context中的原生node.js请求对象req来获取 </span><br><span class="line">&#x2F;&#x2F; 第一步  安装中间件</span><br><span class="line">npm install --save koa-bodyparser@3</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 引入和使用</span><br><span class="line">const bodyParser &#x3D; require(&#39;koa-bodyparser&#39;);</span><br><span class="line">app.use(bodyParser());</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 获取和解析参数</span><br><span class="line">ctx.request.body</span><br></pre></td></tr></table></figure>

<h2 id="路由中间件"><a href="#路由中间件" class="headerlink" title="路由中间件"></a>路由中间件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;安装</span><br><span class="line">npm install --save koa-router</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 引入和使用</span><br><span class="line">const Koa &#x3D; require(&#39;koa&#39;);</span><br><span class="line">const Router &#x3D; require(&#39;koa-router&#39;);</span><br><span class="line"> </span><br><span class="line">const app &#x3D; new Koa();</span><br><span class="line">const router &#x3D; new Router();</span><br><span class="line"> </span><br><span class="line">router.get(&#39;&#x2F;&#39;, function (ctx, next) &#123;</span><br><span class="line">    ctx.body&#x3D;&quot;Hello JSPang&quot;;</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app</span><br><span class="line">  .use(router.routes())</span><br><span class="line">  .use(router.allowedMethods());</span><br><span class="line">  app.listen(3000,()&#x3D;&gt;&#123;</span><br><span class="line">      console.log(&#39;starting at port 3000&#39;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#x2F;&#x2F; allowedMethods处理的业务是当所有路由中间件执行完成之后,若ctx.status为空或者404的时候,丰富response对象的header头</span><br></pre></td></tr></table></figure>

<h2 id="静态资源中间件"><a href="#静态资源中间件" class="headerlink" title="静态资源中间件"></a>静态资源中间件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 安装</span><br><span class="line">npm install --save koa-static</span><br><span class="line">&#x2F;&#x2F; 引入和使用</span><br><span class="line">const static &#x3D; require(&#39;koa-static&#39;)</span><br><span class="line"></span><br><span class="line">const staticPath &#x3D; &#39;.&#x2F;static&#39;</span><br><span class="line"></span><br><span class="line">app.use(static(</span><br><span class="line">  path.join( __dirname,  staticPath)</span><br><span class="line">))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>koa</category>
      </categories>
      <tags>
        <tag>koa</tag>
      </tags>
  </entry>
  <entry>
    <title>css操作</title>
    <url>/2020/03/01/css%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h2 id="背景色实现水平进度条"><a href="#背景色实现水平进度条" class="headerlink" title="背景色实现水平进度条"></a>背景色实现水平进度条</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 用渐变色的方式创建背景图片</span><br><span class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">to</span> <span class="selector-tag">right</span>, <span class="selector-id">#00c9ff</span>, <span class="selector-id">#00c9ff</span>);</span><br><span class="line">// 必须指定</span><br><span class="line"><span class="selector-tag">background-repeat</span>: <span class="selector-tag">no-repeat</span>;</span><br><span class="line"><span class="selector-tag">backgroud-size</span>: 70% 100%</span><br></pre></td></tr></table></figure>

<h2 id="去除原生样式"><a href="#去除原生样式" class="headerlink" title="去除原生样式"></a>去除原生样式</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">-webkit-appearance</span>: <span class="selector-tag">none</span>;</span><br></pre></td></tr></table></figure>

<h2 id="描边动画"><a href="#描边动画" class="headerlink" title="描边动画"></a>描边动画</h2><blockquote>
<p>使用stroke-dasharray(虚线之间的间隔)、stroke-dashoffset(虚线起始偏移量)和其他样式属性<br><a href="https://weithesky.github.io/static/page/描边动画.html" target="_blank" rel="noopener">演示</a></p>
</blockquote>
<h2 id="路径动画"><a href="#路径动画" class="headerlink" title="路径动画"></a>路径动画</h2><blockquote>
<p> 使用offset-path(定义svg路径)、offset-distance(元素相对路径的位置)和其他样式属性<br> <a href="https://weithesky.github.io/static/page/css路径动画.html" target="_blank" rel="noopener">演示</a></p>
</blockquote>
<h2 id="模拟地球"><a href="#模拟地球" class="headerlink" title="模拟地球"></a>模拟地球</h2><blockquote>
<p> 利用图片的repeat保持图片起止位置相同<br> <a href="https://weithesky.github.io/static/page/模拟地球.html" target="_blank" rel="noopener">演示</a></p>
</blockquote>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>github存放静态资源</title>
    <url>/2020/03/01/%E4%BD%BF%E7%94%A8github%E5%AD%98%E6%A1%A3%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90/</url>
    <content><![CDATA[<h2 id="普通仓库"><a href="#普通仓库" class="headerlink" title="普通仓库"></a>普通仓库</h2><blockquote>
<h3 id="访问github静态资源时把路径的上的tree或者blob换成raw即可"><a href="#访问github静态资源时把路径的上的tree或者blob换成raw即可" class="headerlink" title="访问github静态资源时把路径的上的tree或者blob换成raw即可"></a>访问github静态资源时把路径的上的tree或者blob换成raw即可</h3></blockquote>
<h2 id="gitpage仓库"><a href="#gitpage仓库" class="headerlink" title="gitpage仓库"></a>gitpage仓库</h2><blockquote>
<h3 id="像访问网站资源一样访问资源路径"><a href="#像访问网站资源一样访问资源路径" class="headerlink" title="像访问网站资源一样访问资源路径"></a>像访问网站资源一样访问资源路径</h3></blockquote>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建SSR服务器</title>
    <url>/2020/03/01/%E6%90%AD%E5%BB%BA%E7%A7%81%E4%BA%BASSR/</url>
    <content><![CDATA[<h3 id="准备服务器"><a href="#准备服务器" class="headerlink" title="准备服务器"></a>准备服务器</h3><blockquote>
<p>购买服务器,推荐可以使用支付宝支付</p>
</blockquote>
<p>  <a href="https://my.vultr.com/" target="_blank" rel="noopener">vultr</a></p>
<h3 id="安装ShadowsocksR"><a href="#安装ShadowsocksR" class="headerlink" title="安装ShadowsocksR"></a>安装ShadowsocksR</h3><blockquote>
<p>安装ShadowsocksR<em>注意centos系统版本，推荐7及以下</em></p>
</blockquote>
<p>  <a href="http://www.pianshen.com/article/6625560743/;jsessionid=0D910C0C28A9A7FAD7E2800D66C5B702" target="_blank" rel="noopener">参考链接</a></p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装包下载器</span></span><br><span class="line">yum -y install wget</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装脚本</span></span><br><span class="line">wget -N https://raw.githubusercontent.com/hombo125/doubi/master/ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入脚本</span></span><br><span class="line">bash ssr.sh</span><br></pre></td></tr></table></figure>



<h3 id="安装谷歌BBR加速工具"><a href="#安装谷歌BBR加速工具" class="headerlink" title="安装谷歌BBR加速工具"></a>安装谷歌BBR加速工具</h3><p>  <a href="https://www.cnblogs.com/claidx/p/10708519.html" target="_blank" rel="noopener">链接地址</a></p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 链接脚本</span></span><br><span class="line">wget –no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh</span><br><span class="line">chmod +x bbr.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入脚本</span></span><br><span class="line">./bbr.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 任意键下载工具</span></span><br></pre></td></tr></table></figure>



<h3 id="SSR脚本配置"><a href="#SSR脚本配置" class="headerlink" title="SSR脚本配置"></a>SSR脚本配置</h3><blockquote>
<p>需要保证端口是开启状态，不然不生效</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查询80端口是否开启,自行修改端口号</span></span><br><span class="line">firewall-cmd --query-port=80/tcp --zone=public</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">添加80端口，如需添加其他端口，自行修改端口号</span></span><br><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>环境</category>
      </categories>
      <tags>
        <tag>ssr</tag>
      </tags>
  </entry>
  <entry>
    <title>使用github部署静态网页</title>
    <url>/2020/03/01/github%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/</url>
    <content><![CDATA[<blockquote>
<p>使用github部署静态网页</p>
</blockquote>
<h3 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3><blockquote>
<p>创建仓库，并在设置中把分支设为master<br><img src="https://weithesky.github.io/static/images/gitpage.1.png" alt="设置"></p>
</blockquote>
<h3 id="git操作"><a href="#git操作" class="headerlink" title="git操作"></a>git操作</h3>  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 本地初始化git</span></span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">clone</span>远程仓库到本地</span></span><br><span class="line">git clone 远程仓库地址</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 本地要提交的文件复制到仓库目录下</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新文件添加到git</span></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 提交</span></span><br><span class="line">git commit -m '提交信息'</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> push到远程仓库</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure>



<h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><p>  <a href="https://weithesky.github.io/仓库名/" target="_blank" rel="noopener">用户名.github.io/仓库名</a></p>
]]></content>
      <categories>
        <category>环境</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>git安装和配置ssh</title>
    <url>/2020/03/01/git%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AEssh/</url>
    <content><![CDATA[<h2 id="git下载"><a href="#git下载" class="headerlink" title="git下载"></a>git下载</h2><blockquote>
<p>由于翻墙的原因可以在国内开源进行下载，比如<a href="https://npm.taobao.org/mirrors/git-for-windows" target="_blank" rel="noopener">淘宝镜像</a></p>
</blockquote>
<h2 id="一些环境配置"><a href="#一些环境配置" class="headerlink" title="一些环境配置"></a>一些环境配置</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 配置用户名</span></span><br><span class="line">git config --global user.name "username"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置邮箱</span></span><br><span class="line">git config --global user.email "username@email.com"</span><br></pre></td></tr></table></figure>


<h2 id="生成ssh"><a href="#生成ssh" class="headerlink" title="生成ssh"></a>生成ssh</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br><span class="line"><span class="meta">#</span><span class="bash">连续默认回车，最后在C:\Users\你的用户名.ssh找到公钥id_rsa.pub</span></span><br><span class="line"><span class="meta">#</span><span class="bash">在github的个人设置页面设置后生成的ssh</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ssh密钥链接避免每次git与github操作时需要输入密码等</span></span><br></pre></td></tr></table></figure>



<h2 id="验收ssh"><a href="#验收ssh" class="headerlink" title="验收ssh"></a>验收ssh</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br><span class="line"><span class="meta">#</span><span class="bash"> 出现&lt;hi 你的github名&gt;时表明链接成功</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>环境</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>vue创建项目</title>
    <url>/2020/03/01/vue%E5%88%9B%E5%BB%BA%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<blockquote>
<p>简单记录下vue3.0创建项目的流程</p>
</blockquote>
<h3 id="命令操作"><a href="#命令操作" class="headerlink" title="命令操作"></a>命令操作</h3><blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装vue3.0</span></span><br><span class="line">npm install -g @vue/cli</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">创建项目</span></span><br><span class="line">vue create vue-app</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">使用vue-gui</span></span><br><span class="line">vue ui</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="vue可选配置文件"><a href="#vue可选配置文件" class="headerlink" title="vue可选配置文件"></a>vue可选配置文件</h3><blockquote>
<p>在package.json同级目录创建<strong>vue.config.js</strong>,如果存在会被<code>@vue/cli</code>自动加载。</p>
</blockquote>
<h3 id="配置淘宝镜像cnmp"><a href="#配置淘宝镜像cnmp" class="headerlink" title="配置淘宝镜像cnmp"></a>配置淘宝镜像cnmp</h3><blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p><a href="https://npm.taobao.org/" target="_blank" rel="noopener">淘宝镜像，还可以下载某些软件</a></p>
</blockquote>
]]></content>
      <categories>
        <category>VUE</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>nvm管理多个node版本</title>
    <url>/2020/03/01/nvm%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><blockquote>
<p>nvm-windows - 实现本地多个node版本进行管理</p>
</blockquote>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><blockquote>
<p>使用github下载最新的安装包<br><a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener">链接</a><br>nvm-setup.zip 为安装包</p>
</blockquote>
<h3 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h3><blockquote>
<p>常见命令如下:<br>  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看nvm版本</span></span><br><span class="line">nvm v</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装node版本</span></span><br><span class="line">nvm install 10.5.0 </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看本地node列表</span></span><br><span class="line">nvm list</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用某个node版本</span></span><br><span class="line">nvm use 版本号</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><blockquote>
<p>当指令安装node缓慢时，可以在淘宝镜像下载node的zip压缩包，解压到nvm的安装目录下,文件夹的名字为版本号即可<br><a href="https://npm.taobao.org/mirrors/node" target="_blank" rel="noopener">node镜像</a></p>
</blockquote>
]]></content>
      <categories>
        <category>环境</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>nvm</tag>
      </tags>
  </entry>
</search>
